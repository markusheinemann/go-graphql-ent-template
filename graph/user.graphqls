type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  createdAt: String!
  updatedAt: String!
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

extend type Query {
  user(id: ID): User
  users(after: Cursor, first: Int, before: Cursor, last: Int, where: UserWhereInput): UserConnection
}

input CreateUserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UpdateUserInput {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
}

extend type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
}
